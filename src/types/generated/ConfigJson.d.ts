/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration schema for Youtube synch service node
 */
export interface YoutubeSyncNodeConfiguration {
  /**
   * Joystream Metaprotocol App ID that will be used for content attribution
   */
  appId: string
  /**
   * Development environment of the node
   */
  env: 'local' | 'dev' | 'prod' | 'test'
  /**
   * Specifies external endpoints that the distributor node will connect to
   */
  endpoints: {
    /**
     * Query node graphql server uri (for example: http://localhost:8081/graphql)
     */
    queryNode: string
    /**
     * Joystream node websocket api uri (for example: ws://localhost:9944)
     */
    joystreamNodeWs: string
  }
  /**
   * Specifies paths where node's data will be stored
   */
  directories: {
    /**
     * Path to a directory where all the cached assets will be stored
     */
    assets: string
  }
  /**
   * Specifies the logging configuration
   */
  logs?: {
    file?: FileLoggingOptions
    console?: ConsoleLoggingOptions
    elastic?: ElasticsearchLoggingOptions
  }
  /**
   * Specifies node limits w.r.t. storage, outbound connections etc.
   */
  limits: {
    /**
     * Maximum total size of all (cached) assets stored in `directories.assets`
     */
    storage: string
    /**
     * Maximum number of concurrent downloads from the storage node(s)
     */
    maxConcurrentStorageNodeUploads: number
    /**
     * Maximum number of total simultaneous outbound connections to storage node(s) (excluding proxy connections)
     */
    maxConcurrentOutboundConnections: number
    /**
     * Timeout for all outbound storage node http requests in milliseconds
     */
    outboundRequestsTimeoutMs: number
    /**
     * Timeout for pending storage node downloads in seconds
     */
    youtubePendingDownloadTimeoutSec: number
    /**
     * Maximum size of a data object allowed to be cached by the node
     */
    maxCachedItemSize?: string
  }
  /**
   * Specifies how often periodic tasks (for example youtube state polling) are executed.
   */
  intervals: {
    /**
     * After how many minutes, the service should poll the Youtube api for channels state update
     */
    youtubePolling: number
    /**
     * How often, in seconds, will the YT-sync service attempt to send requests to all current storage node endpoints in order to check how quickly they respond. The node will never make more than 0 such requests concurrently.
     */
    checkStorageNodeResponseTimes: number
  }
  joystreamChannelCollaborator: JoystreamChannelCollaborators
  youtubeConfig: YoutubeOauth2ClientConfiguration
  ypp: YoutubePartnerProgramApp
}
export interface FileLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Path where the logs will be stored (absolute or relative to config file)
   */
  path: string
  /**
   * Maximum number of log files to store. Recommended to be at least 7 when frequency is set to `daily` and at least 24 * 7 when frequency is set to `hourly`
   */
  maxFiles?: number
  /**
   * Maximum size of a single log file in bytes
   */
  maxSize?: number
  /**
   * The frequency of creating new log files (regardless of maxSize)
   */
  frequency?: 'yearly' | 'monthly' | 'daily' | 'hourly'
  /**
   * Whether to archive old logs
   */
  archive?: boolean
}
export interface ConsoleLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
}
export interface ElasticsearchLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Elastichsearch endpoint to push the logs to (for example: http://localhost:9200)
   */
  endpoint: string
}
/**
 * Joystream channel collaborators used for syncing the content
 */
export interface JoystreamChannelCollaborators {
  memberId: number
  accountMnemonic: string
}
/**
 * Youtube Oauth2 Client configuration
 */
export interface YoutubeOauth2ClientConfiguration {
  clientId: string
  clientSecret: string
}
/**
 * Youtube Partner Program app configuration
 */
export interface YoutubePartnerProgramApp {
  appPort: number
  ownerKey: string
  dailyApiQuota: SpecifiesDailyYoutubeAPIQuotaRationingSchemeForYoutubePartnerProgram
  /**
   * Specifies creator onboarding requirements for Youtube Partner Program
   */
  creatorOnboardingRequirements: {
    /**
     * Minimum number of subscribers required to onboard a creator
     */
    minimumSubscribersCount: number
    /**
     * Minimum number of videos required to onboard a creator
     */
    minimumVideoCount: number
    /**
     * All videos must be at least this old to onboard a creator
     */
    minimumVideoAgeHours: number
    /**
     * The channel must be at least this old to onboard a creator
     */
    minimumChannelAgeHours: number
  }
}
/**
 * Specifies daily Youtube API quota rationing scheme for Youtube Partner Program
 */
export interface SpecifiesDailyYoutubeAPIQuotaRationingSchemeForYoutubePartnerProgram {
  sync: number
  signup: number
}
