/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Configuration schema for Youtube synch service node
 */
export interface YoutubeSyncNodeConfiguration {
  /**
   * Joystream network related configuration
   */
  joystream: {
    /**
     * Joystream's faucet configuration (needed for captcha-free membership creation)
     */
    faucet: {
      /**
       * Joystream's faucet URL
       */
      endpoint: string
      /**
       * Bearer Authentication Key needed to bypass captcha verification on Faucet
       */
      captchaBypassKey: string
    }
    /**
     * Joystream metaprotocol application specific configuration
     */
    app: {
      /**
       * Name of the application
       */
      name: string
      /**
       * Specifies the application auth key's string seed for generating ed25519 keypair
       */
      accountSeed: string
    }
    channelCollaborator: JoystreamChannelCollaboratorUsedForSyncingTheContent
  }
  /**
   * Specifies external endpoints that the distributor node will connect to
   */
  endpoints: {
    /**
     * Query node graphql server uri (for example: http://localhost:8081/graphql)
     */
    queryNode: string
    /**
     * Joystream node websocket api uri (for example: ws://localhost:9944)
     */
    joystreamNodeWs: string
  }
  /**
   * Specifies paths where node's data will be stored
   */
  directories: {
    /**
     * Path to a directory where all the cached assets will be stored
     */
    assets: string
  }
  /**
   * Specifies the logging configuration
   */
  logs?: {
    file?: FileLoggingOptions
    console?: ConsoleLoggingOptions
    elastic?: ElasticsearchLoggingOptions
  }
  /**
   * Specifies youtube-synch service limits.
   */
  limits: {
    dailyApiQuota: SpecifiesDailyYoutubeAPIQuotaRationingSchemeForYoutubePartnerProgram
    /**
     * Max no. of videos that should be concurrently downloaded from Youtube to be prepared for upload to Joystream
     */
    maxConcurrentDownloads: number
    /**
     * Max no. of videos that should be concurrently uploaded to Joystream's storage node
     */
    maxConcurrentUploads: number
    /**
     * Maximum total size of all downloaded assets stored in `directories.assets`
     */
    storage: string
  }
  /**
   * Specifies how often periodic tasks (for example youtube state polling) are executed.
   */
  intervals: {
    /**
     * After how many minutes, the polling service should poll the Youtube api for channels state update
     */
    youtubePolling: number
    /**
     * After how many minutes, the service should scan the database for new content to start downloading, on-chain creation & uploading to storage node
     */
    contentProcessing: number
  }
  youtube: YoutubeOauth2ClientConfiguration
  aws?: AWSConfigurationsNeededToConnectWithDynamoDBInstance
  /**
   * Specifies creator onboarding requirements for Youtube Partner Program
   */
  creatorOnboardingRequirements: {
    /**
     * Minimum number of subscribers required to onboard a creator
     */
    minimumSubscribersCount: number
    /**
     * Minimum number of videos required to onboard a creator
     */
    minimumVideoCount: number
    /**
     * All videos must be at least this old to onboard a creator
     */
    minimumVideoAgeHours: number
    /**
     * The channel must be at least this old to onboard a creator
     */
    minimumChannelAgeHours: number
  }
  httpApi: PublicApiConfiguration
}
/**
 * Joystream channel collaborators used for syncing the content
 */
export interface JoystreamChannelCollaboratorUsedForSyncingTheContent {
  memberId: string
  /**
   * Specifies the available application auth keys.
   */
  account: (SubstrateUri | MnemonicPhrase)[]
}
/**
 * Keypair's substrate uri (for example: //Alice)
 */
export interface SubstrateUri {
  type?: 'ed25519'
  suri: string
}
/**
 * Mnemonic phrase
 */
export interface MnemonicPhrase {
  type?: 'ed25519' | 'sr25519' | 'ecdsa'
  mnemonic: string
}
export interface FileLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Path where the logs will be stored (absolute or relative to config file)
   */
  path: string
  /**
   * Maximum number of log files to store. Recommended to be at least 7 when frequency is set to `daily` and at least 24 * 7 when frequency is set to `hourly`
   */
  maxFiles?: number
  /**
   * Maximum size of a single log file in bytes
   */
  maxSize?: number
  /**
   * The frequency of creating new log files (regardless of maxSize)
   */
  frequency?: 'yearly' | 'monthly' | 'daily' | 'hourly'
  /**
   * Whether to archive old logs
   */
  archive?: boolean
}
export interface ConsoleLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
}
export interface ElasticsearchLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Elasticsearch endpoint to push the logs to (for example: http://localhost:9200)
   */
  endpoint: string
  auth: ElasticsearchAuthenticationOptions
}
export interface ElasticsearchAuthenticationOptions {
  /**
   * Elasticsearch username
   */
  username: string
  /**
   * Elasticsearch password
   */
  password: string
}
/**
 * Specifies daily Youtube API quota rationing scheme for Youtube Partner Program
 */
export interface SpecifiesDailyYoutubeAPIQuotaRationingSchemeForYoutubePartnerProgram {
  sync: number
  signup: number
}
/**
 * Youtube Oauth2 Client configuration
 */
export interface YoutubeOauth2ClientConfiguration {
  /**
   * Youtube Oauth2 Client Id
   */
  clientId: string
  /**
   * Youtube Oauth2 Client Secret
   */
  clientSecret: string
  /**
   * Maximum percentage of daily Youtube API quota that can be used by the Periodic polling service. Once this limit is reached the service will stop polling for new videos until the next day(when Quota resets). All the remaining quota (100 - maxAllowedQuotaUsageInPercentage) will be used for potential channel's signups.
   */
  maxAllowedQuotaUsageInPercentage?: number
  /**
   * Path to the Google Cloud's Application Default Credentials (ADC) key file. It is required to periodically monitor the Youtube API quota usage.
   */
  adcKeyFilePath?: string
}
/**
 * AWS configurations needed to connect with DynamoDB instance
 */
export interface AWSConfigurationsNeededToConnectWithDynamoDBInstance {
  /**
   * DynamoDB endpoint to connect with the instance, only set if node is connecting to local DynamoDB instance
   */
  endpoint?: string
  /**
   * DynamoDB endpoint to connect with the instance, only set if node is connecting to AWS DynamoDB instance
   */
  region?: string
  credentials?: AWSCredentials
}
/**
 * Youtube Oauth2 Client configuration
 */
export interface AWSCredentials {
  accessKeyId: string
  secretAccessKey: string
}
/**
 * Public api configuration
 */
export interface PublicApiConfiguration {
  port: number
  ownerKey: string
}
